((arr: scala.Array[scala.Int], f: scala.Function1[scala.Int, scala.Unit]) => {
  val size: scala.Int = arr.length
  var i: scala.Int = 0
  while (i.<(size)) {
    val element: scala.Int = arr.apply(i)
    f.apply(element)
    i = i.+(1)
  }
})

((arr: scala.Array[scala.Predef.String], f: scala.Function1[scala.Predef.String, scala.Unit]) => {
  val size: scala.Int = arr.length
  var i: scala.Int = 0
  while (i.<(size)) {
    val element: java.lang.String = arr.apply(i)
    f.apply(element)
    i = i.+(1)
  }
})

((arr: scala.Array[scala.Predef.String], f: scala.Function1[scala.Predef.String, scala.Unit]) => {
  val size: scala.Int = arr.length
  var i: scala.Int = 0
  while (i.<(size)) {
    val element: java.lang.String = arr.apply(i)
    f.apply(element)
    i = i.+(1)
  }
})

((arr: scala.Array[scala.Int]) => {
  val size: scala.Int = arr.length
  var i: scala.Int = 0
  while (i.<(size)) {
    val element: scala.Int = arr.apply(i)
    ((`i₂`: scala.Int) => java.lang.System.out.println(`i₂`)).apply(element)
    i = i.+(1)
  }
})

((arr: scala.Array[scala.Int], f: scala.Function1[scala.Int, scala.Unit]) => {
  val size: scala.Int = arr.length
  var i: scala.Int = 0
  if (size.%(3).!=(0)) throw new scala.Exception("...") else ()
  while (i.<(size)) {
    f.apply(arr.apply(i))
    f.apply(arr.apply(i.+(1)))
    f.apply(arr.apply(i.+(2)))
    i = i.+(3)
  }
})

((arr: scala.Array[scala.Int], f: scala.Function1[scala.Int, scala.Unit]) => {
  val size: scala.Int = arr.length
  var i: scala.Int = 0
  if (size.%(4).!=(0)) throw new scala.Exception("...") else ()
  while (i.<(size)) {
    f.apply(arr.apply(i.+(0)))
    f.apply(arr.apply(i.+(1)))
    f.apply(arr.apply(i.+(2)))
    f.apply(arr.apply(i.+(3)))
    i = i.+(4)
  }
})

{
  val array: scala.Array[scala.Int] = new scala.Array[scala.Int](4)
  array.update(0, 1)
  array.update(1, 2)
  array.update(2, 3)
  array.update(3, 4)

  (array: scala.Array[scala.Int])
}

{
  val arr1: scala.Array[scala.Int] = {
    val array: scala.Array[scala.Int] = new scala.Array[scala.Int](4)
    array.update(0, 1)
    array.update(1, 3)
    array.update(2, 4)
    array.update(3, 5)

    (array: scala.Array[scala.Int])
  }
  val size: scala.Int = arr1.length
  var i: scala.Int = 0
  while (i.<(size)) {
    val element: scala.Int = arr1.apply(i)
    ((x: scala.Int) => scala.Predef.println(x)).apply(element)
    i = i.+(1)
  }
}
